AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  env: 
    Description: "enviroment of deploy"
    Type: String
  frontDomain: 
    Description: "domain asigned to bucket frontend"
    Type: String

Resources:

  PicotaBucketFrontend:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: 
        Fn::Sub: picota-bucket-frontend-${env}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  PicotaBucketPolicyFrontend:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: 
        Ref: PicotaBucketFrontend
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: 
                Fn::Sub: 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${PicotaCDNOAI}'
            Action: 's3:GetObject'
            Resource: 
              Fn::Sub: ${PicotaBucketFrontend.Arn}/*

  PicotaCDNFrontend:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: 
              Fn::GetAtt: [PicotaBucketFrontend, DomainName]
            Id: picota-bucket-frontend
            S3OriginConfig:
              OriginAccessIdentity: 
                Fn::Sub: 'origin-access-identity/cloudfront/${PicotaCDNOAI}'
        Enabled: 'true'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: picota-bucket-frontend
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  PicotaCDNOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'origin identity'

  PicotaDNSRecords: 
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: Z03106681HAK9G20RE56N
      Comment: add sub domain
      RecordSets:
        - Name: 
            Fn::Sub: ${env}.picota.org.
          Type: A
          AliasTarget:
            HostedZoneId: Z03106681HAK9G20RE56N
            DNSName: 
              Fn::GetAtt: PicotaCDNFrontend.DomainName

  # PicotaCertificateFrontend:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: picota.org
  #     DomainValidationOptions:
  #       - DomainName: picota.org
  #         HostedZoneId: 
  #     ValidationMethod: 'DNS'
  
  # PicotaRoute53RecordSetGroup:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     Name: picota.org
  #     Type: A
  #     HostedZoneId: 
  #       Ref: HostedZoneId
  #     AliasTarget:
  #       DNSName: 
  #         Fn::GetAtt: ApiGWCustomDomain.DistributionDomainName
  #       EvaluateTargetHealth: false
  #       HostedZoneId: 
  #         Fn::GetAtt: ApiGWCustomDomain.DistributionHostedZoneId
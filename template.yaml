AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  env: 
    Description: "enviroment of deploy"
    Type: String
  frontDomain: 
    Description: "domain asigned to bucket frontend"
    Type: String
  hostedZoneId:
    Description: ""
    Default: Z03106681HAK9G20RE56N
    Type: String

Resources:

################################################################## FRONTEND 

  PicotaBucketFrontend:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: 
        Fn::Sub: picota-bucket-frontend-${env}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  PicotaBucketPolicyFrontend:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: 
        Ref: PicotaBucketFrontend
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: 
                Fn::Sub: 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${PicotaCDNOAI}'
            Action: 's3:GetObject'
            Resource: 
              Fn::Sub: ${PicotaBucketFrontend.Arn}/*

  PicotaCDNFrontend:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - Fn::Sub: ${frontDomain}
        Origins:
          - DomainName: 
              Fn::GetAtt: [PicotaBucketFrontend, DomainName]
            Id: picota-bucket-frontend
            S3OriginConfig:
              OriginAccessIdentity: 
                Fn::Sub: 'origin-access-identity/cloudfront/${PicotaCDNOAI}'
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: picota-bucket-frontend
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: 
            Ref: PicotaCertificateFrontend
          SslSupportMethod: sni-only

  PicotaCDNOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'origin identity'

  PicotaDNSRecords: 
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: 
        Fn::Sub: ${hostedZoneId}
      RecordSets:
        - Name: 
            Fn::Sub: ${frontDomain}
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: 
              Fn::GetAtt: PicotaCDNFrontend.DomainName

  PicotaCertificateFrontend:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: 
        Fn::Sub: ${frontDomain}
      DomainValidationOptions:
        - DomainName: dev.picota.org
          HostedZoneId: 
            Fn::Sub: ${hostedZoneId}
      ValidationMethod: DNS

################################################################# BACKEND

  PicotaECS:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: picota-ecs
      DefaultCapacityProviderStrategy: 

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.

    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: picota-core
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 256
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 0.5GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      # ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      #TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: "picota-core"
          Image: public.ecr.aws/i1o6i3w5/picota-ecr-dev:picota-backend
          PortMappings:
            - ContainerPort: 8080
          # Send logs to CloudWatch Logs
          # LogConfiguration:
          #   LogDriver: awslogs
          #   Options:
          #     awslogs-region: !Ref AWS::Region
          #     awslogs-group: !Ref LogGroup
          #     awslogs-stream-prefix: ecs
  # A role needed by ECS

  PicotaRepository: 
    Type: AWS::ECR::PublicRepository
    Properties: 
      RepositoryName: 
        Fn::Sub: picota-ecr-${env}